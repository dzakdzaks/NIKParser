# name of the workflow
name: Android Build CI/CD

on:

  push:
    branches: [ main ]
    # pull_request:
    # branches: [ staging ]
#    tags:
#      - 'v*'

jobs:
  android-build:
    # The type of runner that the job will run on    
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      # Automatically overrides the version code and version name through the github actions
      - name: Bump version
        uses: chkfung/android-version-actions@v1.1
        with:
          gradlePath: android/app/build.gradle
          versionCode: ${{github.run_number}}

      - name: Install Dependencies
        run: yarn install

      - name: Run Unit Test
        run: ./gradlew test

      ## cache Gradle dependencies and wrapper to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

        # Building and signing App
      - name: Build Android App Bundle
          run: ./gradlew bundleRelease

      - name: Sign ABB
          uses: r0adkll/sign-android-release@v1
          # ID used to access action output
          id: sign_app
          with:
            releaseDirectory: android/app/build/outputs/bundle/release
            signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
            alias: ${{ secrets.SIGNING_KEY_ALIAS }}
            keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
            keyPassword: ${{ secrets.SIGNING_KEY_PASSWORD }}

      - name: Upload Artifact
          uses: actions/upload-artifact@v2
          with:
            name: Signed app bundle
            path: ${{steps.sign_app.outputs.signedReleaseFile}}
            retention-days: 4

      - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
            tag_name: ${{ github.run_number }}
            release_name: Release V${{ github.run_number }}
            draft: false
            prerelease: false

      - name: Upload Release AAB
          id: upload-release-asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ${{steps.sign_app.outputs.signedReleaseFile}}
            asset_name: app-release-v${{ github.run_number }}.zip
            asset_content_type: application/zip

          # Distribute  App to google play
      - name: Publish to Play Store internal test track
          uses: r0adkll/upload-google-play@v1.0.15
          with:
            serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
            packageName: com.artery
            releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
            track: internal
            inAppUpdatePriority: 3

#      - name: Notify slack success
#          uses: craftech-io/slack-action@v1
#          with:
#            slack_webhook_url: ${{ secrets.SLACK_NOTIFY }}
#            slack_channel: pipeline-ci-cd
#            status: ${{ job.status }}
#          if: always()
